{"version":3,"sources":["constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","reducers.js","registerServiceWorker.js","index.js"],"names":["CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Card","this","props","name","email","id","className","alt","src","Component","CardList","console","log","cardComponent","robots","map","robot","index","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","CounterButton","count","color","udateCount","bind","nextProps","nextState","setState","onClick","Header","PureComponent","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.aaa294c0.chunk.js","sourcesContent":["// export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n\nexport const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from \"react\";\n\nexport default class Card extends Component {\n\n  render() {\n      const {name, email, id} = this.props\n    return (\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n          <h1>Robots</h1>\n        <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n        <div>\n          <h2>{name}</h2>\n          <p> {email}</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react'\n\nimport Card from './Card';\nexport default class CardList extends Component {\n    \n\n    render() {\n        console.log(\"CardList render\")\n        const { robots } = this.props;\n        const cardComponent = robots.map((robot,index) => {\n            return <Card name ={robot.name} email={robot.email} id={robot.id} key={robot.id}/>\n        });\n\n        return (\n            <div>\n                {cardComponent}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class SearchBox extends Component {\n\n   \n    render() {\n        console.log(\"SearchBox render\")\n        const {searchChange} = this.props;\n        return (\n            <div>\n                <input \n                className=\"pa3 ba b--green bg-lightest-blue\" \n                type='search' \n                placeholder='search robots'\n                onChange = {searchChange} />\n            </div>\n        )\n    }\n}\n","import React from 'react';\n\nconst Scroll = (props) =>{\nreturn (\n    <div style={{overflowY:'scroll', border:'5px solid black',height:'800px'}}>\n        {props.children}\n    </div>\n)\n}\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n  static getDerivedStateFromError(error) {\n    \n    return { hasError: true };\n  }\n  componentDidMount(error, info) {\n    console.log(info)\n    //this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            count:0,\n            color: ''\n        }\n        this.udateCount = this.udateCount.bind(this);\n    }\n    shouldComponentUpdate(nextProps, nextState){\n        // console.log(nextProps, nextState);\n        // return true;\n        if (this.state.count !== nextState.count){\n            return true;\n        }\n        return false;\n    }\n    udateCount(){\n        this.setState(state => {\n            return {count: state.count +1}\n        });\n    }\n    render() {\n        console.log(\"CounterButton render\")\n        return (\n            <div>\n                 <button color={this.props.color} onClick={this.udateCount} >Click Me : {this.state.count}</button>\n            </div>\n        );\n    }\n}\n\nexport default CounterButton;","import React, { PureComponent } from 'react';\nimport CounterButton from './CounterButton'\n\nclass Header extends PureComponent {\n\n    // shouldComponentUpdate(nextProps, nextState){\n    //     return false;\n    // }\n    \n    render() {\n        console.log(\"Header render\")\n        return (\n            <div>\n                 <h1 className=\"f1\">RoboFriends</h1>\n                 <CounterButton color={'red'} />\n            </div>\n        );\n    }\n}\n\nexport default Header;","\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setSearchField,requestRobots } from \"../actions\";\n\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport Header from '../components/Header'\nimport \"./App.css\";\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error:state.requestRobots.error\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  \n  return {\n    \n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n};\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n\n    return (\n      <div className=\"tc\">\n       <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text });\n\n// export const requestRobots = (dispatch) => {\n//   dispatch({type:REQUEST_ROBOTS_PENDING});\n  // fetch(\"https://jsonplaceholder.typicode.com/users\")\n  // .then((response) => response.json())\n  // .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\n  // .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error})) \n// }\n\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then((response) => response.json())\n  .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\n  .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error})) \n}\n","\n\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state\n  }\n}\n\n// const initialStateRobots = {\n//   isPending: false,\n//   robots:[],\n//   error:''\n// }\n\n// export const requestRobots = (state=initialStateRobots, action={}) =>{\n//   switch(action.type){\n//     case REQUEST_ROBOTS_PENDING:\n//       return Object.assign({}, state,{isPending:true});\n//     case REQUEST_ROBOTS_SUCCESS:\n//       return Object.assign({}, state, {robots:action.payload, isPending:false});\n//     case REQUEST_ROBOTS_FAILED:\n//       return Object.assign({}, state, {error:action.payload, isPending:false});\n//     default:\n//       return state;\n//   }\n// }\nconst initialStateRobots = {\n  robots: [],\n  isPending: true,\n  error:''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload})\n    default:\n      return state\n  }\n}\n","\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { createStore , applyMiddleware, combineReducers} from \"redux\";\n// import reportWebVitals from \"./reportWebVitals\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\nimport { Provider,  } from \"react-redux\";\nimport { searchRobots , requestRobots} from \"./reducers\";\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\nregisterServiceWorker();"],"sourceRoot":""}